{"version":3,"sources":["daplink/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/*\n* DAPjs\n* Copyright Arm Limited 2018\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { CmsisDAP, Proxy } from \"../proxy\";\nimport { DAPLinkFlash, DAPLinkSerial } from \"./enums\";\n\n/**\n * @hidden\n */\nconst DEFAULT_BAUDRATE = 9600;\n/**\n * @hidden\n */\nconst DEFAULT_SERIAL_DELAY = 200;\n/**\n * @hidden\n */\nconst DEFAULT_PAGE_SIZE = 62;\n\n/**\n * DAPLink Class\n */\nexport class DAPLink extends CmsisDAP implements Proxy {\n\n    /**\n     * Progress event\n     * @event\n     */\n    public static EVENT_PROGRESS: string = \"progress\";\n\n    /**\n     * Serial read event\n     * @event\n     */\n    public static EVENT_SERIAL_DATA: string = \"serial\";\n\n    private timer: NodeJS.Timer = null;\n\n    /**\n     * Detect if buffer contains text or binary data\n     */\n    private isBufferBinary(buffer: ArrayBuffer): boolean {\n        const bufferString: string = String.fromCharCode.apply(null, new Uint16Array(buffer, 0, 50));\n\n        for (let i = 0; i < bufferString.length; i++) {\n            const charCode = bufferString.charCodeAt(i);\n            // 65533 is a code for unknown character\n            // 0-8 are codes for control characters\n            if (charCode === 65533 || charCode <= 8) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private writeBuffer(buffer: ArrayBuffer, pageSize: number, offset: number = 0): Promise<void> {\n        const end = Math.min(buffer.byteLength, offset + pageSize);\n        const page = buffer.slice(offset, end);\n        const data = new Uint8Array(page.byteLength + 1);\n\n        data.set([page.byteLength]);\n        data.set(new Uint8Array(page), 1);\n\n        return this.send(DAPLinkFlash.WRITE, data)\n        .then(() => {\n            this.emit(DAPLink.EVENT_PROGRESS, offset / buffer.byteLength);\n            if (end < buffer.byteLength) {\n                return this.writeBuffer(buffer, pageSize, end);\n            }\n        });\n    }\n\n    /**\n     * Flash the target\n     * @param buffer The image to flash\n     * @param pageSize The page size to use (defaults to 62)\n     * @returns Promise\n     */\n    public flash(buffer: BufferSource, pageSize: number = DEFAULT_PAGE_SIZE): Promise<void> {\n        function isView(source: ArrayBuffer | ArrayBufferView): source is ArrayBufferView {\n            return (source as ArrayBufferView).buffer !== undefined;\n        }\n\n        const arrayBuffer = isView(buffer) ? buffer.buffer : buffer;\n        const streamType = this.isBufferBinary(arrayBuffer) ? 0 : 1;\n\n        return this.send(DAPLinkFlash.OPEN, new Uint32Array([streamType]))\n        .then(result => {\n            // An error occurred\n            if (result.getUint8(1) !== 0) return;\n            return this.writeBuffer(arrayBuffer, pageSize);\n        })\n        .then(() => {\n            this.emit(DAPLink.EVENT_PROGRESS, 1.0);\n            return this.send(DAPLinkFlash.CLOSE);\n        })\n        .then(result => {\n            // An error occurred\n            if (result.getUint8(1) !== 0) return;\n            return this.send(DAPLinkFlash.RESET);\n        })\n        .then(() => undefined);\n    }\n\n    /**\n     * Get the serial baud rate setting\n     * @returns Promise of baud rate\n     */\n    public getSerialBaudrate(): Promise<number> {\n        return this.send(DAPLinkSerial.READ_SETTINGS)\n        .then(result => {\n            return result.getUint32(1, true);\n        });\n    }\n\n    /**\n     * Set the serial baud rate setting\n     * @param baudrate The baudrate to use (defaults to 9600)\n     * @returns Promise\n     */\n    public setSerialBaudrate(baudrate: number = DEFAULT_BAUDRATE): Promise<void> {\n        return this.send(DAPLinkSerial.WRITE_SETTINGS, new Uint32Array([baudrate]))\n        .then(() => undefined);\n    }\n\n    /**\n     * Start listening for serial data\n     * @param serialDelay The serial delay to use (defaults to 200)\n     */\n    public startSerialRead(serialDelay: number = DEFAULT_SERIAL_DELAY) {\n        this.stopSerialRead();\n        this.timer = setInterval(() => {\n            return this.send(DAPLinkSerial.READ)\n            .then(serialData => {\n                if (serialData.byteLength > 0) {\n                    // check if there is any data returned from the device\n                    // first byte contains the vendor code\n                    // second byte contains the actual length of data read from the device\n                    const dataLength = serialData.getUint8(1);\n                    if (dataLength !== 0) {\n                        const offset = 2;\n                        const dataArray = serialData.buffer.slice(offset, offset + dataLength);\n                        const data = String.fromCharCode.apply(null, new Uint8Array(dataArray));\n                        this.emit(DAPLink.EVENT_SERIAL_DATA, data);\n                    }\n                }\n            });\n        }, serialDelay);\n    }\n\n    /**\n     * Stop listening for serial data\n     */\n    public stopSerialRead() {\n        if (this.timer) {\n            clearInterval(this.timer);\n            this.timer = null;\n        }\n    }\n\n    /**\n     * Write serial data\n     * @param data The data to write\n     * @returns Promise\n     */\n    public serialWrite(data: string): Promise<void> {\n        const arrayData = data.split(\"\").map((e: string) => e.charCodeAt(0));\n        arrayData.unshift(arrayData.length);\n        return this.send(DAPLinkSerial.WRITE, new Uint8Array(arrayData).buffer)\n        .then(() => undefined);\n    }\n}\n"],"sourceRoot":"../../src"}